#!/bin/bash

MAPPING_FILE="$HOME/.vscode_projects.json"
ZSHRC_FILE="$HOME/.zshrc"


# Install mode
if [ "$1" == "--install" ]; then
    # Create mapping file if it doesn't exist
    if [ ! -f "$MAPPING_FILE" ]; then
        echo "{}" > "$MAPPING_FILE"
        echo "Created mapping file: $MAPPING_FILE"
    fi

    echo "Enter the initial GitHub root directory (e.g., $HOME/GitHub):"
    read -r GITHUB_DIR
    if [ -d "$GITHUB_DIR" ]; then
        tmp=$(mktemp)
        jq --arg key "github_root" --arg val "$GITHUB_DIR" '. + {($key): $val}' "$MAPPING_FILE" > "$tmp" && mv "$tmp" "$MAPPING_FILE"
    else
        echo "Invalid directory: $GITHUB_DIR"
        exit 1
    fi

    # Add autocomplete function to .zshrc if not already present
    if ! grep -q "_vscode_autocomplete" "$ZSHRC_FILE"; then
        cat << 'EOF' >> "$ZSHRC_FILE"

# VS Code project autocomplete
_vscode_autocomplete() {
    local cur=${words[2]} # project alias being typed
    local mappings="$HOME/.vscode_projects.json"

    if [[ -f "$mappings" ]]; then
        reply=($(jq -r 'keys[]' "$mappings" | grep -E "^$cur"))
    fi
}

compctl -K _vscode_autocomplete web-git
EOF
        echo "Added autocomplete function to $ZSHRC_FILE"
    else
        echo "Autocomplete function already exists in $ZSHRC_FILE"
    fi

    # Ensure binding for the new command name exists even if the function was already present
    if ! grep -q 'compctl -K _vscode_autocomplete web_git' "$ZSHRC_FILE"; then
        echo 'compctl -K _vscode_autocomplete web_git' >> "$ZSHRC_FILE"
        echo "Added autocomplete binding for web_git to $ZSHRC_FILE"
    fi

    echo "Installation complete."
    exit 0
fi

# Uninstall mode
if [ "$1" == "--uninstall" ]; then
    # Remove mapping file
    if [ -f "$MAPPING_FILE" ]; then
        rm "$MAPPING_FILE"
        echo "Removed mapping file: $MAPPING_FILE"
    else
        echo "Mapping file not found: $MAPPING_FILE"
    fi

    # Remove autocomplete function from .zshrc
    if grep -q "_vscode_autocomplete" "$ZSHRC_FILE"; then
        sed -i '' '/_vscode_autocomplete/,/EOF/d' "$ZSHRC_FILE"
        echo "Removed autocomplete function from $ZSHRC_FILE"
    else
        echo "Autocomplete function not found in $ZSHRC_FILE"
    fi

    echo "Uninstallation complete."
    exit 0
fi

# Ensure mapping file exists
if [ ! -f "$MAPPING_FILE" ]; then
    echo "Mapping file not found: $MAPPING_FILE"
    exit 1
fi

# Sync mode: update mapping with any new folders
if [ "$1" == "--sync" ]; then
    GITHUB_DIR=$(jq -r '.github_root' "$MAPPING_FILE")
    if [ "$GITHUB_DIR" == "null" ]; then
        echo "GitHub root directory not found in $MAPPING_FILE. Please run '--install' first."
        exit 1
    fi

    echo "Syncing projects in $GITHUB_DIR..."
    for dir in "$GITHUB_DIR"/*/; do
        [ -d "$dir" ] || continue
        alias=$(basename "$dir")
        if ! jq -e --arg key "$alias" 'has($key)' "$MAPPING_FILE" > /dev/null; then
            echo "Adding missing project '$alias' -> '$dir'"
            tmp=$(mktemp)
            jq --arg key "$alias" --arg val "$dir" '. + {($key): $val}' "$MAPPING_FILE" > "$tmp" && mv "$tmp" "$MAPPING_FILE"
        fi
    done
    echo "Sync complete."
    exit 0
fi

# Help/usage
if [ -z "$1" ]; then
    echo "Usage: web-git <project_alias> | web-git --sync"
    exit 1
fi


# Launch project
PROJECT_ALIAS="$1"
PROJECT_PATH=$(jq -r --arg key "$PROJECT_ALIAS" '.[$key]' "$MAPPING_FILE")

if [ "$PROJECT_PATH" == "null" ]; then
    echo "No mapping found for alias '$PROJECT_ALIAS'"
    exit 1
fi

# New: open the repo on github.com using the remote URL from .git/config
if [ ! -d "$PROJECT_PATH" ]; then
    echo "Project path does not exist: $PROJECT_PATH"
    exit 1
fi

CONFIG_FILE="$PROJECT_PATH/.git/config"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Git config not found: $CONFIG_FILE"
    exit 1
fi

# Prefer git to read the URL
REPO_URL=$(git -C "$PROJECT_PATH" config --get remote.origin.url 2>/dev/null)

# Fallback: parse .git/config directly
if [ -z "$REPO_URL" ]; then
    REPO_URL=$(awk -F' = ' '/^\s*url = / {print $2; exit}' "$CONFIG_FILE")
fi

if [ -z "$REPO_URL" ]; then
    echo "No remote URL found in $CONFIG_FILE"
    exit 1
fi

# Normalize common SSH GitHub URLs to https for the browser
if [[ "$REPO_URL" =~ ^git@github\.com:(.+)$ ]]; then
    REPO_URL="https://github.com/${BASH_REMATCH[1]}"
elif [[ "$REPO_URL" =~ ^ssh://git@github\.com/(.+)$ ]]; then
    REPO_URL="https://github.com/${BASH_REMATCH[1]}"
fi

# Open in default browser (macOS)
open "$REPO_URL"